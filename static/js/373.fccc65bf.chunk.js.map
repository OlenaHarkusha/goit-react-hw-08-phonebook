{"version":3,"file":"static/js/373.fccc65bf.chunk.js","mappings":"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","sources":["components/AddContactForm.jsx","components/FilterContacts.jsx","components/EditContactForm.jsx","components/ContactsItem.jsx","components/ContactList.jsx","components/Pages/ContactsPage.jsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  FormLabel,\n  Input,\n  chakra,\n  useToast,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postContact } from 'redux/ContactsSlice/Operations';\nimport { selectContacts } from 'redux/Selectors';\nimport * as Yup from 'yup';\n\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const toast = useToast();\n\n  const formik = useFormik({\n    initialValues: { name: '', number: '' },\n    onSubmit: values => {\n      const { name, number } = values;\n      const normalizedName = name.toLowerCase();\n\n      if (isInContacts(normalizedName)) {\n        toast({\n          title: `${name} is already in your contact list`,\n          position: 'top',\n          status: 'error',\n          duration: 9000,\n          isClosable: true,\n        });\n        return;\n      }\n\n      if (name.trim() === '' || number.trim() === ' ') {\n        toast({\n          title: `the field must not be empty`,\n          position: 'top',\n          status: 'error',\n          duration: 9000,\n          isClosable: true,\n        });\n        return;\n      }\n\n      dispatch(postContact({ name, number }));\n\n      formik.resetForm();\n    },\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .min(4, 'Must be 4 characters or more')\n        .required('Required'),\n      number: Yup.string()\n        .min(6, 'Must be 6 characters or more')\n        .required('Required'),\n    }),\n  });\n\n  const isInContacts = name => {\n    return contacts.some(item => item.name.toLowerCase().includes(name));\n  };\n\n  return (\n    <Box p={'10px'} display={'flex'} justifyContent={'center'}>\n      <chakra.form onSubmit={formik.handleSubmit} w={'80%'}>\n        <FormLabel mb={'10px'}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            onChange={formik.handleChange}\n            value={formik.values.name}\n            mt={'10px'}\n            bg={'white'}\n          />\n        </FormLabel>\n        <FormLabel mb={'10px'}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.number}\n            mt={'10px'}\n            bg={'white'}\n          />\n        </FormLabel>\n        <Button type=\"submit\" mt={'10px'} colorScheme=\"purple\">\n          Add Contact\n        </Button>\n      </chakra.form>\n    </Box>\n  );\n};\n","import { Input } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/FilterSlice/FilterSlice';\nimport { selectFilter } from 'redux/Selectors';\n\nexport const FilterContacts = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <Input\n      placeholder=\"Find contacts by name\"\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={onChange}\n      bg={'white'}\n      mb={'20px'}\n    />\n  );\n};\n","import { Box, Button, FormLabel, Input, chakra } from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/ContactsSlice/Operations';\n\nexport const EditContactsForm = ({ initName, initNumber, id, onClose }) => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: { name: initName, number: initNumber },\n    onSubmit: values => {\n      const { name, number } = values;\n      const contact = { name, number };\n      dispatch(editContact({ contact, id }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Box p={'10px'} display={'flex'} justifyContent={'center'}>\n      <chakra.form onSubmit={formik.handleSubmit} w={'80%'}>\n        <FormLabel mb={'10px'}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            onChange={formik.handleChange}\n            value={formik.values.name}\n            mt={'10px'}\n            bg={'white'}\n          />\n        </FormLabel>\n        <FormLabel mb={'10px'}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.number}\n            mt={'10px'}\n            bg={'white'}\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          mt={'10px'}\n          colorScheme=\"purple\"\n          onClick={onClose}\n        >\n          Edit Contact\n        </Button>\n      </chakra.form>\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  ListItem,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { EditContactsForm } from 'components/EditContactForm';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/ContactsSlice/Operations';\n\nexport const ContactItem = ({ item }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const dispatch = useDispatch();\n  return (\n    <ListItem\n      key={item.id}\n      display={'flex'}\n      alignItems={'center'}\n      justifyContent={'space-between'}\n    >\n      <Text>\n        {item.name}: {item.number}\n      </Text>\n      <Box display={'flex'} gap={'10px'}>\n        <Button\n          type=\"button\"\n          onClick={() => dispatch(deleteContact(item.id))}\n          colorScheme=\"purple\"\n          size={'sm'}\n        >\n          Delete contact\n        </Button>\n        <Button type=\"button\" onClick={onOpen} colorScheme=\"purple\" size={'sm'}>\n          Edit contact\n        </Button>\n        <Modal isOpen={isOpen} onClose={onClose}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Modal Title</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <EditContactsForm\n                initName={item.name}\n                initNumber={item.number}\n                id={item.id}\n                onClose={onClose}\n              />\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      </Box>\n    </ListItem>\n  );\n};\n","import { List, Spinner } from '@chakra-ui/react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/ContactsSlice/Operations';\nimport { selectIsLoading, selectVisibleContatcs } from 'redux/Selectors';\n\nimport { ContactItem } from 'components/ContactsItem';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContatcs);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return isLoading ? (\n    <Spinner\n      thickness=\"4px\"\n      speed=\"0.65s\"\n      emptyColor=\"gray.200\"\n      color=\"purple.500\"\n      size=\"xl\"\n      m={'0 auto'}\n    />\n  ) : (\n    <List display={'flex'} flexDirection={'column'} gap={'10px'}>\n      {visibleContacts.map(item => (\n        <ContactItem item={item} key={item.id} />\n      ))}\n    </List>\n  );\n};\n","import { Box, Heading } from '@chakra-ui/react';\nimport { AddContactForm } from 'components/AddContactForm';\nimport { FilterContacts } from '../FilterContacts';\nimport { ContactsList } from 'components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <Box p={'20px'}>\n      <Heading as={'h1'} color={'purple.900'} textAlign={'center'} mb={'10px'}>\n        Phonebook\n      </Heading>\n      <AddContactForm />\n      <Heading as={'h2'} color={'purple.900'} textAlign={'center'} mb={'10px'}>\n        Contacts\n      </Heading>\n      <FilterContacts />\n      <ContactsList />\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["AddContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","toast","useToast","formik","useFormik","initialValues","name","number","onSubmit","values","normalizedName","toLowerCase","isInContacts","title","position","status","duration","isClosable","trim","postContact","resetForm","validationSchema","Yup","min","required","some","item","includes","p","display","justifyContent","handleSubmit","w","mb","I","type","onChange","handleChange","value","mt","bg","colorScheme","FilterContacts","filter","selectFilter","placeholder","e","filterContacts","target","EditContactsForm","initName","initNumber","id","onClose","contact","editContact","onClick","ContactItem","useDisclosure","isOpen","onOpen","alignItems","gap","deleteContact","size","ContactsList","visibleContacts","selectVisibleContatcs","isLoading","selectIsLoading","useEffect","fetchContacts","thickness","speed","emptyColor","color","m","flexDirection","map","as","textAlign"],"sourceRoot":""}