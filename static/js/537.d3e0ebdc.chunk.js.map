{"version":3,"file":"static/js/537.d3e0ebdc.chunk.js","mappings":"iTAcaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAERC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAQH,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SACM,KAAjBD,EAAMI,QAAqC,KAApBH,EAASG,QAClCT,EAAM,CACJU,MAAO,8BACPC,SAAU,MACVC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAGhBhB,GAASiB,EAAAA,EAAAA,IAAM,CAAEV,MAAAA,EAAOC,SAAAA,KACxBJ,EAAOc,WACR,EACDC,iBAAkBC,EAAAA,GAAW,CAC3BZ,SAAUY,EAAAA,KACPC,IAAI,GAAI,iCACRC,IAAI,EAAG,gCACPC,SAAS,YACZhB,MAAOa,EAAAA,KAAab,MAAM,yBAAyBgB,SAAS,gBAIhE,OACE,SAAC,KAAD,CAAKC,EAAG,OAAQC,QAAS,OAAQC,eAAgB,SAAjD,UACE,UAAC,SAAD,CAAajB,SAAUL,EAAOuB,aAAcC,EAAG,MAA/C,WACE,UAAC,IAAD,CAAWC,GAAI,OAAf,kBAEGzB,EAAO0B,QAAQvB,OAASH,EAAO2B,OAAOxB,OACrC,yBAAMH,EAAO2B,OAAOxB,QAClB,MACJ,SAAC,EAAAyB,EAAD,CACEC,KAAK,QACLC,KAAK,QACLC,SAAU/B,EAAOgC,aACjBC,MAAOjC,EAAOM,OAAOH,MACrB+B,GAAI,OACJC,GAAI,QACJC,YAAY,eAGhB,UAAC,IAAD,sBAEGpC,EAAO0B,QAAQtB,UAAYJ,EAAO2B,OAAOvB,UACxC,SAAC,IAAD,CAAMiC,MAAO,MAAb,SAAqBrC,EAAO2B,OAAOvB,WACjC,MACJ,SAAC,EAAAwB,EAAD,CACEC,KAAK,WACLC,KAAK,WACLC,SAAU/B,EAAOgC,aACjBC,MAAOjC,EAAOM,OAAOF,SACrB8B,GAAI,OACJC,GAAI,cAGR,SAAC,IAAD,CAAQN,KAAK,SAASK,GAAI,OAAQE,YAAY,SAA9C,wBAMP,EAED,W,6GCzEA,SAASrC,EAASuC,GAChB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAiBC,EAAAA,EAAAA,MACvB,OAAOC,EAAAA,EAAAA,UACL,kBAAMC,EAAAA,EAAAA,IAAcL,EAAMM,WAAP,QAAC,UACfJ,GACAH,GAFL,GAIA,CAACA,EAASC,EAAMM,UAAWJ,GAE9B,C","sources":["components/Pages/LoginPage.jsx","../node_modules/@chakra-ui/toast/dist/chunk-ENIANY67.mjs"],"sourcesContent":["import {\n  Box,\n  Button,\n  FormLabel,\n  Input,\n  Text,\n  chakra,\n  useToast,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/AuthSlice/Operations';\nimport * as Yup from 'yup';\n\nexport const LoginPage = () => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const formik = useFormik({\n    initialValues: { email: '', password: '' },\n    onSubmit: values => {\n      const { email, password } = values;\n      if (email.trim() === '' || password.trim() === '') {\n        toast({\n          title: 'the field must not be empty',\n          position: 'top',\n          status: 'error',\n          duration: 9000,\n          isClosable: true,\n        });\n      }\n      dispatch(login({ email, password }));\n      formik.resetForm();\n    },\n    validationSchema: Yup.object({\n      password: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .min(6, 'Must be 6 characters or more')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n  });\n\n  return (\n    <Box p={'10px'} display={'flex'} justifyContent={'center'}>\n      <chakra.form onSubmit={formik.handleSubmit} w={'50%'}>\n        <FormLabel mb={'10px'}>\n          Email\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n          <Input\n            type=\"email\"\n            name=\"email\"\n            onChange={formik.handleChange}\n            value={formik.values.email}\n            mt={'10px'}\n            bg={'white'}\n            colorScheme=\"purple\"\n          />\n        </FormLabel>\n        <FormLabel>\n          Password\n          {formik.touched.password && formik.errors.password ? (\n            <Text color={'red'}>{formik.errors.password}</Text>\n          ) : null}\n          <Input\n            type=\"password\"\n            name=\"password\"\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            mt={'10px'}\n            bg={'white'}\n          />\n        </FormLabel>\n        <Button type=\"submit\" mt={'10px'} colorScheme=\"purple\">\n          Log In\n        </Button>\n      </chakra.form>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n","import {\n  useToastOptionContext\n} from \"./chunk-SBZF3S2Z.mjs\";\nimport {\n  createToastFn\n} from \"./chunk-PE6CKLNB.mjs\";\n\n// src/use-toast.tsx\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction useToast(options) {\n  const { theme } = useChakra();\n  const defaultOptions = useToastOptionContext();\n  return useMemo(\n    () => createToastFn(theme.direction, {\n      ...defaultOptions,\n      ...options\n    }),\n    [options, theme.direction, defaultOptions]\n  );\n}\nvar use_toast_default = useToast;\n\nexport {\n  useToast,\n  use_toast_default\n};\n"],"names":["LoginPage","dispatch","useDispatch","toast","useToast","formik","useFormik","initialValues","email","password","onSubmit","values","trim","title","position","status","duration","isClosable","login","resetForm","validationSchema","Yup","max","min","required","p","display","justifyContent","handleSubmit","w","mb","touched","errors","I","type","name","onChange","handleChange","value","mt","bg","colorScheme","color","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}